{"version":3,"sources":["utils/constants.js","components/SearchBar/index.js","components/Table/index.js","components/Map/index.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","SearchBarForm","props","setSearchbarDefaultCoordinate","coordinate","form","setFields","value","latitude","longitude","handleSubmit","e","preventDefault","validateFields","err","values","console","log","find_places","set_setSearchbarDefaultCoordinate","this","getFieldDecorator","getFieldError","getFieldsError","isFieldTouched","layout","onSubmit","Item","validateStatus","rules","required","message","placehoder","placeholder","mode","style","width","flexGrow","map","elem","key","type","htmlType","React","Component","SearchBar","Form","create","name","columns","title","dataIndex","render","icon","src","text","tags","tag","toUpperCase","DataTable","state","dataSource","data","length","i","geometry","location","lat","lng","types","vicinity","mapStyles","margin","MapContainer","showingInfoWindow","activeMarkers","selectedPlaces","selectedPlace","manual","currentLocation","loaded","onMarkerClick","marker","setState","activeMarker","onClose","panMapTo","setMap","mapProps","fetchPlaces","window","set_getPlaces","radius","callback","service","google","maps","places","PlacesService","coordinateOBJ","LatLng","forEach","request","nearbySearch","done","concat","handleClick","updateCurrentLocation","latLng","zoom","onReady","initialCenter","mapCenter","onClick","position","place","visible","GoogleApiWrapper","apiKey","env","App","func","setSearchbarCoordinate","getPlaces","set_places","addMarker","fields","filters","gged","push","coords","componentDidMount","navigator","geolocation","getCurrentPosition","pos","className","class","bind","Map","Table","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cb10bfa2.chunk.js","sourcesContent":["import react from \"react\";\n\nexport default {\n    'API_KEY': \"AIzaSyC4q0S0GbA-cxRC_4ZVcd6AOeW3Yjt10tE\",\n};","import React from 'react';\r\nimport { Form, Icon, Input, Button, Select } from 'antd';\r\nimport env from '../../utils/constants';\r\n\r\nconst { Option } = Select;\r\nconst API_KEY = env.API_KEY;\r\n\r\nfunction hasErrors(fieldsError) {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass SearchBarForm extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.props.set_setSearchbarDefaultCoordinate(this.setSearchbarDefaultCoordinate);\r\n  }\r\n\r\n  setSearchbarDefaultCoordinate = (coordinate) => {\r\n    this.props.form.setFields({\r\n      'latitude': {\r\n        value: coordinate.latitude,\r\n      },\r\n      'longitude': {\r\n        value: coordinate.longitude,\r\n      },\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n        console.log(\"went\");\r\n        this.props.find_places(values);\r\n        //getPlaces({latitude: values.latitude, longitude: values.longitude}, values.radius, values.filters)\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // To disable submit button at the beginning.\r\n    this.props.form.validateFields();\r\n  }\r\n\r\n  render() {\r\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\r\n\r\n    // Only show error after a field is touched.\r\n    const usernameError = isFieldTouched('username') && getFieldError('username');\r\n    const passwordError = isFieldTouched('password') && getFieldError('password');\r\n\r\n    // Only show error after a field is touched.\r\n    //const usernameError = isFieldTouched('username') && getFieldError('username');\r\n    //const passwordError = isFieldTouched('password') && getFieldError('password');\r\n    return (\r\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n        <Form.Item validateStatus=\"success\">\r\n          {getFieldDecorator('latitude', {\r\n            rules: [{ required: true, message: 'Please input your Latitude!' }],\r\n          })(\r\n            <Input\r\n              placehoder=\"Latitude\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item validateStatus=\"success\">\r\n          {getFieldDecorator('longitude', {\r\n            rules: [{ required: true, message: 'Please input your Longitude' }],\r\n          })(\r\n            <Input\r\n              placeholder=\"Longitude\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item validateStatus=\"success\">\r\n          {getFieldDecorator('radius', {\r\n            rules: [{ required: true, message: 'Please input your range' }],\r\n          })(\r\n            <Input\r\n              placeholder=\"radius\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item validateStatus=\"success\">\r\n          {getFieldDecorator('filters', {\r\n            rules: [{ required: true, message: ' ' }],\r\n          })(\r\n            <Select\r\n              mode=\"multiple\"\r\n              style={{ width: '30em', flexGrow: '1' }}\r\n              placeholder=\"Please select\"\r\n            >\r\n              {['restaurant', 'movie_theater', 'atm', 'mosque', 'bank', 'doctor'].map( elem => <Option key={elem}> {elem} </Option> ) }\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Search\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst SearchBar = Form.create({ \r\n  name: 'SearchBar', \r\n})(SearchBarForm);\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport { Table, Divider, Tag } from 'antd';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'icon',\r\n    dataIndex: 'icon',\r\n    key: 'icon',\r\n    render: icon => <img src={icon} />\r\n  },\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    render: text => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: 'vicinity',\r\n    dataIndex: 'vicinity',\r\n    key: 'vicinity',\r\n  }, \r\n  {\r\n    title: 'Lat/Lon',\r\n    dataIndex: 'coordinate',\r\n  },\r\n  {\r\n    title: 'Tags',\r\n    key: 'tags',\r\n    dataIndex: 'tags',\r\n    render: tags => (\r\n      <span>\r\n        {tags.map(tag => {\r\n          return (\r\n            <Tag key={tag}>\r\n              {tag.toUpperCase()}\r\n            </Tag>\r\n          );\r\n        })}\r\n      </span>\r\n    ),\r\n  },\r\n];\r\n\r\n// const data = data.map( (data, i) => {\r\n//   return {\r\n//     'key': i,\r\n//     'name': data.name,\r\n//     'icon': data.icon,\r\n//     'coordinate': `${data.geometry.location.lat()} , ${data.geometry.location.lng()}`,\r\n//     'tags': data.types,\r\n//     'vicinity': data.vicinity\r\n//   }\r\n// })\r\n\r\n\r\n\r\n\r\nclass DataTable extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      dataSource: {}\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <Table \r\n        columns={columns} \r\n        dataSource={ \r\n          this.props.data.length ? \r\n            this.props.data.map( (data, i) => {\r\n              return {\r\n                'key': i,\r\n                'name': data.name,\r\n                'icon': data.icon,\r\n                'coordinate': `${data.geometry.location.lat()} , ${data.geometry.location.lng()}`,\r\n                'tags': data.types,\r\n                'vicinity': data.vicinity,\r\n              }\r\n            })\r\n            : []\r\n        } \r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default DataTable;\r\n","import React from 'react';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\nimport env from '../../utils/constants';\r\n\r\nconst mapStyles = {\r\n  margin: '3em',\r\n};\r\n\r\nclass MapContainer extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  map = {};\r\n  state = {\r\n    showingInfoWindow: false,\r\n    activeMarkers: {},\r\n    selectedPlaces: {},\r\n    selectedPlace: {},\r\n    manual: false,\r\n    currentLocation: {},\r\n    loaded: true,\r\n    map: {}\r\n\r\n  };\r\n  onMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n\r\n  onClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n  // componentDidMount = () => {\r\n  //   if (navigator && navigator.geolocation) {\r\n  //     navigator.geolocation.getCurrentPosition(pos => {\r\n  //       const coords = pos.coords;\r\n  //       this.setState({\r\n  //         currentLocation: {\r\n  //           lat: coords.latitude,\r\n  //           lng: coords.longitude\r\n  //         },\r\n  //         loaded: true\r\n  //       });\r\n\r\n  //       //let center = new maps.LatLng(current.lat, current.lng);\r\n  //       //map.panTo(center);\r\n  //     });\r\n  //   }\r\n  // }\r\n  panMapTo = () => {\r\n\r\n  }\r\n\r\n  setMap = (mapProps, map) => {\r\n    console.log(\"ayhy\");\r\n    console.log(mapProps);\r\n    console.log(map);\r\n    this.setState({\r\n      'map': map\r\n    })\r\n    console.log(this.fetchPlaces);\r\n    window.fetchPlaces = this.fetchPlaces;\r\n    this.props.set_getPlaces(this.fetchPlaces)\r\n  }\r\n\r\n  fetchPlaces = (coordinate, radius, types, callback) => {\r\n    console.log(\"came fetchplaces\");\r\n    let service = new this.props.google.maps.places.PlacesService(this.state.map);\r\n    var coordinateOBJ = new this.props.google.maps.LatLng(coordinate.latitude,coordinate.longitude);\r\n    let data = []\r\n    function addPlaces(places, done){\r\n      data = data.concat(places);\r\n      console.log(\"places data\");\r\n      console.log(places);\r\n      console.log(data);\r\n      if(done){\r\n        console.log(\"came\")\r\n        callback(data);\r\n      }\r\n    }\r\n    types.forEach( (type,i) => {\r\n      console.log(types.length, i);\r\n      var request = {\r\n        location: coordinateOBJ,\r\n        radius: radius,\r\n        type: type\r\n      };\r\n      console.log(\"gge pringting\");\r\n      service.nearbySearch(request, (e) => {console.log(e); addPlaces(e, (i==types.length-1) ? true : false )});\r\n    });\r\n  }\r\n\r\n  handleClick = (mapProps, map, e) => {\r\n    //this.props.addMarker({'latitude': e.latLng.lat(), 'longitude': e.latLng.lng()})\r\n    this.props.updateCurrentLocation({'latitude': e.latLng.lat(), 'longitude': e.latLng.lng()})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.state.loaded ? \r\n        <Map\r\n          google={this.props.google}\r\n          zoom={14}\r\n          style={mapStyles}\r\n          onReady={this.setMap}\r\n          initialCenter={{\r\n            lat: this.props.mapCenter.latitude,\r\n            lng: this.props.mapCenter.longitude\r\n          }}\r\n          onClick={this.handleClick}\r\n        >\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          name={\"current location\"}\r\n          position={{\r\n            lat: this.props.mapCenter.latitude,\r\n            lng: this.props.mapCenter.longitude\r\n          }}\r\n        />\r\n        {this.props.places.map( place => {\r\n          return (\r\n            <Marker\r\n              key={place.coordinate.latitude}\r\n              onClick={this.onMarkerClick}\r\n              name={place.name}\r\n              position={{lat: place.coordinate.latitude, lng: place.coordinate.longitude}}\r\n            />\r\n          )\r\n        })}\r\n          <InfoWindow\r\n            marker={this.state.activeMarker}\r\n            visible={this.state.showingInfoWindow}\r\n            onClose={this.onClose}\r\n          >\r\n            <div>\r\n              <h4>{this.state.selectedPlace.name}</h4>\r\n            </div>\r\n          </InfoWindow>\r\n        </Map>\r\n      : <div> \"loading\" </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: env.API_KEY ,\r\n})(MapContainer);","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport Table from \"./components/Table\";\r\nimport Map from \"./components/Map\";\r\nimport { Card } from 'antd';\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      activeMarkers: [],\r\n      mapCenter: {},\r\n      getPlaces: {},\r\n      places: [],\r\n      setSearchbarCoordinate: {}\r\n    }\r\n  }\r\n\r\n  set_setSearchbarDefaultCoordinate = (func) => {\r\n    this.setState({\r\n      setSearchbarCoordinate: func\r\n    })\r\n  }\r\n\r\n  set_getPlaces = (func) => {\r\n    console.log(\"in appjs setgetplaces\", func);\r\n    this.setState({\r\n      getPlaces: func\r\n    })\r\n  }\r\n\r\n  set_places = (places) => {\r\n    this.setState({\r\n      'places': places\r\n    })\r\n    this.state.places.forEach( (place) => {\r\n      this.addMarker({\r\n        'latitude': place.geometry.location.lat(),\r\n        'longitude':  place.geometry.location.lng(),\r\n      })\r\n    })\r\n    console.log(\"set places\");\r\n    console.log(this.state.places);\r\n  }\r\n\r\n  find_places = (fields) => {\r\n    this.addMarker({'latitude': fields.latitude, 'longitude': fields.longitude});\r\n    this.state.getPlaces({'latitude':fields.latitude,'longitude':fields.longitude }, fields.radius, fields.filters, this.set_places);\r\n  }\r\n\r\n  addMarker = (fields) => {\r\n    let gged = this.state.activeMarkers;\r\n    gged.push({'latitude':fields.latitude,'longitude':fields.longitude })\r\n    this.setState({\r\n      activeMarkers: gged\r\n    });\r\n    // console.log(this.state.activeMarkers);\r\n    // console.log(this.state.getPlaces);\r\n  }\r\n\r\n  updateCurrentLocation = (coords) => {\r\n    this.setState({\r\n      mapCenter: {\r\n        'latitude': coords.latitude,\r\n        'longitude': coords.longitude\r\n      },\r\n    })\r\n    this.state.setSearchbarCoordinate({\r\n      'latitude': coords.latitude,\r\n      'longitude': coords.longitude\r\n    })\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (navigator && navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(pos => {\r\n        const coords = pos.coords;\r\n        this.setState({\r\n          mapCenter: {\r\n            'latitude': coords.latitude,\r\n            'longitude': coords.longitude\r\n          },\r\n          loaded: true\r\n        });\r\n        this.state.setSearchbarCoordinate({\r\n          'latitude': coords.latitude,\r\n          'longitude': coords.longitude\r\n        })\r\n      });\r\n    }\r\n  }\r\n  \r\n  render(){\r\n    return (     \r\n      <div className=\"motherContainer\">\r\n        <div className=\"search\">\r\n          <div class=\"protip\">\r\n            <h3>Pro tip! </h3>\r\n            <span>click on anywhere on the map to select a coordinate</span>\r\n          </div>\r\n          <SearchBar \r\n            set_setSearchbarDefaultCoordinate={this.set_setSearchbarDefaultCoordinate}\r\n            find_places={this.find_places.bind(this)}\r\n            currentLocation={this.state.mapCenter}\r\n          />\r\n        </div>\r\n        <div className=\"result\">\r\n          <div className=\"map\">\r\n            {this.state.loaded ? <Map \r\n              places={ this.state.activeMarkers.map(place => {return {name: `${place.latitude}, ${place.longitude}`, coordinate:{'latitude':place.latitude,'longitude':place.longitude }}}) }\r\n              mapCenter={ this.state.mapCenter }\r\n              set_getPlaces={this.set_getPlaces}\r\n              set_places={this.set_places}\r\n              addMarker={this.addMarker.bind(this)}\r\n              updateCurrentLocation={this.updateCurrentLocation}\r\n            /> : <></>}\r\n          </div>\r\n          <div className=\"table\"><Table data={this.state.places}/></div>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}