{"version":3,"sources":["components/SearchBar/index.js","components/Table/index.js","components/Map/index.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","SearchBarForm","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","addMarker","this","getFieldDecorator","getFieldError","getFieldsError","isFieldTouched","layout","onSubmit","Item","validateStatus","rules","required","message","placehoder","placeholder","mode","style","width","flexGrow","map","elem","key","type","htmlType","React","Component","SearchBar","Form","create","name","columns","title","dataIndex","render","text","tags","tag","color","length","toUpperCase","data","coordinate","address","DataTable","dataSource","mapStyles","margin","MapContainer","state","showingInfoWindow","activeMarkers","selectedPlaces","selectedPlace","manual","currentLocation","loaded","onMarkerClick","marker","setState","activeMarker","onClose","componentDidMount","navigator","geolocation","getCurrentPosition","pos","coords","lat","latitude","lng","longitude","componentDidUpdate","places","panMapTo","google","zoom","initialCenter","onClick","position","place","visible","GoogleApiWrapper","apiKey","App","fields","gged","push","className","bind","Map","Table","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qUAGQA,EAAWC,IAAXD,O,IAMFE,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAGRC,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKH,MAAMI,KAAKC,gBAAe,SAACC,EAAKC,GAC9BD,IACHE,QAAQC,IAAI,4BAA6BF,GACzCC,QAAQC,IAAI,QACZ,EAAKT,MAAMU,UAAUH,QAVT,E,iFAiBhBI,KAAKX,MAAMI,KAAKC,mB,+BAGR,IAAD,EACsEM,KAAKX,MAAMI,KAAhFQ,EADD,EACCA,kBAAmCC,GADpC,EACoBC,eADpB,EACoCD,eAAeE,EADnD,EACmDA,eAGpCA,EAAe,aAAeF,EAAc,YAC5CE,EAAe,aAAeF,EAAc,YAKlE,OACE,kBAAC,IAAD,CAAMG,OAAO,SAASC,SAAUN,KAAKV,cACnC,kBAAC,IAAKiB,KAAN,CAAWC,eAAe,WACvBP,EAAkB,WAAY,CAC7BQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpCV,CAGC,kBAAC,IAAD,CACEW,WAAW,eAIjB,kBAAC,IAAKL,KAAN,CAAWC,eAAe,WACvBP,EAAkB,YAAa,CAC9BQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpCV,CAGC,kBAAC,IAAD,CACEY,YAAY,gBAIlB,kBAAC,IAAKN,KAAN,CAAWC,eAAe,WACvBP,EAAkB,QAAS,CAC1BQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpCV,CAGC,kBAAC,IAAD,CACEY,YAAY,YAIlB,kBAAC,IAAKN,KAAN,CAAWC,eAAe,WACvBP,EAAkB,UAAW,CAC5BQ,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpCV,CAGC,kBAAC,IAAD,CACEa,KAAK,WACLC,MAAO,CAAEC,MAAO,OAAQC,SAAU,KAClCJ,YAAY,iBAEX,CAAC,cAAe,cAAe,OAAQ,UAAW,iBAAiBK,KAAK,SAAAC,GAAI,OAAI,kBAACjC,EAAD,CAAQkC,IAAKD,GAAb,IAAqBA,EAArB,WAIvF,kBAAC,IAAKZ,KAAN,KACE,kBAAC,IAAD,CAAQc,KAAK,UAAUC,SAAS,UAAhC,gB,GA1EkBC,IAAMC,WAqFnBC,EAFGC,IAAKC,OAAO,CAAEC,KAAM,aAApBF,CAAmCtC,G,kBCzF/CyC,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXX,IAAK,OACLY,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAEtB,CACEH,MAAO,UACPC,UAAW,UACXX,IAAK,WAEP,CACEU,MAAO,UACPC,UAAW,cAEb,CACED,MAAO,OACPV,IAAK,OACLW,UAAW,OACXC,OAAQ,SAAAE,GAAI,OACV,8BACGA,EAAKhB,KAAI,SAAAiB,GACR,IAAIC,EAAQD,EAAIE,OAAS,EAAI,WAAa,QAI1C,MAHY,UAARF,IACFC,EAAQ,WAGR,kBAAC,IAAD,CAAKA,MAAOA,EAAOhB,IAAKe,GACrBA,EAAIG,sBASbC,EAAO,CACX,CACEnB,IAAK,IACLQ,KAAM,UACNY,WAAY,aACZC,QAAS,2BACTP,KAAM,CAAC,OAAQ,mBAEjB,CACEd,IAAK,IACLQ,KAAM,QACNY,WAAY,aACZC,QAAS,yBACTP,KAAM,CAAC,UAET,CACEd,IAAK,IACLQ,KAAM,QACNY,WAAY,aACZC,QAAS,yBACTP,KAAM,CAAC,UAaIQ,E,iLANX,OACE,kBAAC,IAAD,CAAOb,QAASA,EAASc,WAAYJ,Q,GAHnBhB,IAAMC,W,QC/DxBoB,EAAY,CAChBC,OAAQ,OAGJC,E,YACJ,WAAYzD,GAAO,IAAD,8BAChB,4CAAMA,KAER6B,IAAM,GAHY,EAIlB6B,MAAQ,CACNC,mBAAmB,EACnBC,cAAe,GACfC,eAAgB,GAChBC,cAAe,GACfC,QAAQ,EACRC,gBAAiB,GACjBC,QAAQ,GAXQ,EAclBC,cAAgB,SAAClE,EAAOmE,EAAQjE,GAAhB,OACd,EAAKkE,SAAS,CACZN,cAAe9D,EACfqE,aAAcF,EACdR,mBAAmB,KAlBL,EAqBlBW,QAAU,SAAAtE,GACJ,EAAK0D,MAAMC,mBACb,EAAKS,SAAS,CACZT,mBAAmB,EACnBU,aAAc,QAzBF,EA6BlBE,kBAAoB,WACdC,WAAaA,UAAUC,aACzBD,UAAUC,YAAYC,oBAAmB,SAAAC,GACvC,IAAMC,EAASD,EAAIC,OACnB,EAAKR,SAAS,CACZJ,gBAAiB,CACfa,IAAKD,EAAOE,SACZC,IAAKH,EAAOI,WAEdf,QAAQ,QAtCE,EA8ClBgB,mBAAqB,WACnBzE,QAAQC,IAAI,EAAKT,MAAMkF,SA/CP,EAiDlBC,SAAW,aAjDO,E,sEAqDR,IAAD,OACP,OACExE,KAAK+C,MAAMO,OACT,kBAAC,MAAD,CACEmB,OAAQzE,KAAKX,MAAMoF,OACnBC,KAAM,GACN3D,MAAO6B,EACP+B,cAAe,CACbT,IAAKlE,KAAK+C,MAAMM,gBAAgBa,IAChCE,IAAKpE,KAAK+C,MAAMM,gBAAgBe,MAGpC,kBAAC,SAAD,CACEQ,QAAS5E,KAAKuD,cACd3B,KAAM,mBACNiD,SAAU,CACRX,IAAKlE,KAAK+C,MAAMM,gBAAgBa,IAChCE,IAAKpE,KAAK+C,MAAMM,gBAAgBe,OAGnCpE,KAAKX,MAAMkF,OAAOrD,KAAK,SAAA4D,GACtB,OACE,kBAAC,SAAD,CACE1D,IAAK0D,EAAMtC,WAAW2B,SACtBS,QAAS,EAAKrB,cACd3B,KAAMkD,EAAMlD,KACZiD,SAAU,CAACX,IAAKY,EAAMtC,WAAW2B,SAAUC,IAAKU,EAAMtC,WAAW6B,gBAIrE,kBAAC,aAAD,CACEb,OAAQxD,KAAK+C,MAAMW,aACnBqB,QAAS/E,KAAK+C,MAAMC,kBACpBW,QAAS3D,KAAK2D,SAEd,6BACE,4BAAK3D,KAAK+C,MAAMI,cAAcvB,SAIpC,gD,GA9FmBL,IAAMC,WAoGlBwD,6BAAiB,CAC9BC,OAAQ,2CADKD,CAEZlC,GCtEYoC,E,YAhCb,WAAY7F,GAAO,IAAD,8BAChB,4CAAMA,KACD0D,MAAQ,CACXG,eAAgB,IAHF,E,uEAOPiC,GACT,IAAIC,EAAOpF,KAAK+C,MAAMG,eACtBkC,EAAKC,KAAK,CAAC,SAAWF,EAAOhB,SAAS,UAAYgB,EAAOd,YACzDrE,KAAKyD,SAAS,CACZP,eAAgBkC,IAElBvF,QAAQC,IAAIE,KAAK+C,MAAMG,kB,+BAIvB,OACE,yBAAKoC,UAAU,mBACb,yBAAKA,UAAU,UAAS,kBAAC,EAAD,CAAWvF,UAAWC,KAAKD,UAAUwF,KAAKvF,SAClE,yBAAKsF,UAAU,UACb,yBAAKA,UAAU,OAAM,kBAACE,EAAD,CAAKjB,OACxBvE,KAAK+C,MAAMG,eAAehC,KAAI,SAAA4D,GAAU,MAAO,CAAClD,KAAM,KAAMY,WAAW,CAAC,SAAWsC,EAAMX,SAAS,UAAYW,EAAMT,kBAGtH,yBAAKiB,UAAU,SAAQ,kBAACG,EAAD,a,GA1BflE,IAAMC,WCMlBkE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BrC,UAAUsC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzD,QACfc,UAAUsC,cAAcQ,YAI1B9G,QAAQC,IACN,iHAKEoG,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBzG,QAAQC,IAAI,sCAGRoG,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLlH,QAAQkH,MAAM,4CAA6CA,MC1FjEC,IAAShF,OAAO,kBAAC,EAAD,MAASiF,SAASC,eAAe,SDgB1C,SAAkBhB,GACvB,GAA6C,kBAAmBrC,UAAW,CAGzE,GADkB,IAAIsD,IAAIC,eAAwBxB,OAAOC,SAASwB,MACpDC,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMmB,eAAN,sBAEP1B,IAgEV,SAAiCO,EAAOC,GAEtCsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjE,UAAUsC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLjH,QAAQC,IACN,oEAvFAoI,CAAwBjC,EAAOC,GAI/BrC,UAAUsC,cAAc4B,MAAM1B,MAAK,WACjCxG,QAAQC,IACN,iHAMJkG,EAAgBC,EAAOC,OCvC/BC,K","file":"static/js/main.52305697.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Icon, Input, Button, Select } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction hasErrors(fieldsError) {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass SearchBarForm extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n        console.log(\"went\");\r\n        this.props.addMarker(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // To disable submit button at the beginning.\r\n    this.props.form.validateFields();\r\n  }\r\n\r\n  render() {\r\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\r\n\r\n    // Only show error after a field is touched.\r\n    const usernameError = isFieldTouched('username') && getFieldError('username');\r\n    const passwordError = isFieldTouched('password') && getFieldError('password');\r\n\r\n    // Only show error after a field is touched.\r\n    //const usernameError = isFieldTouched('username') && getFieldError('username');\r\n    //const passwordError = isFieldTouched('password') && getFieldError('password');\r\n    return (\r\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n        <Form.Item validateStatus=\"success\">\r\n          {getFieldDecorator('latitude', {\r\n            rules: [{ required: true, message: 'Please input your Latitude!' }],\r\n          })(\r\n            <Input\r\n              placehoder=\"Latitude\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item validateStatus=\"success\">\r\n          {getFieldDecorator('longitude', {\r\n            rules: [{ required: true, message: 'Please input your Longitude' }],\r\n          })(\r\n            <Input\r\n              placeholder=\"Longitude\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item validateStatus=\"success\">\r\n          {getFieldDecorator('range', {\r\n            rules: [{ required: true, message: 'Please input your Longitude' }],\r\n          })(\r\n            <Input\r\n              placeholder=\"Range\"\r\n            />,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item validateStatus=\"success\">\r\n          {getFieldDecorator('filters', {\r\n            rules: [{ required: true, message: 'Please input your Longitude' }],\r\n          })(\r\n            <Select\r\n              mode=\"multiple\"\r\n              style={{ width: '40em', flexGrow: '1' }}\r\n              placeholder=\"Please select\"\r\n            >\r\n              {['restaurants', 'coffee shop', 'park', 'theatre', 'shopping mall'].map( elem => <Option key={elem}> {elem} </Option> ) }\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst SearchBar = Form.create({ name: 'SearchBar' })(SearchBarForm);\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport { Table, Divider, Tag } from 'antd';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    render: text => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: 'Address',\r\n    dataIndex: 'address',\r\n    key: 'address',\r\n  }, \r\n  {\r\n    title: 'Lat/Lon',\r\n    dataIndex: 'coordinate',\r\n  },\r\n  {\r\n    title: 'Tags',\r\n    key: 'tags',\r\n    dataIndex: 'tags',\r\n    render: tags => (\r\n      <span>\r\n        {tags.map(tag => {\r\n          let color = tag.length > 5 ? 'geekblue' : 'green';\r\n          if (tag === 'loser') {\r\n            color = 'volcano';\r\n          }\r\n          return (\r\n            <Tag color={color} key={tag}>\r\n              {tag.toUpperCase()}\r\n            </Tag>\r\n          );\r\n        })}\r\n      </span>\r\n    ),\r\n  },\r\n];\r\n\r\nconst data = [\r\n  {\r\n    key: '1',\r\n    name: 'IZAKAYA',\r\n    coordinate: 32 + \" / \" + 31.23,\r\n    address: 'New York No. 1 Lake Park',\r\n    tags: ['nice', 'child friendly'],\r\n  },\r\n  {\r\n    key: '2',\r\n    name: 'Dacca',\r\n    coordinate: 42.23 + \" / \" + 54,\r\n    address: 'London No. 1 Lake Park',\r\n    tags: ['loser'],\r\n  },\r\n  {\r\n    key: '3',\r\n    name: 'Dacca',\r\n    coordinate: 42.23 + \" / \" + 54,\r\n    address: 'London No. 1 Lake Park',\r\n    tags: ['NICE'],\r\n  },\r\n];\r\n\r\n\r\nclass DataTable extends React.Component{\r\n  render(){\r\n    return (\r\n      <Table columns={columns} dataSource={data} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default DataTable;\r\n","import React from 'react';\r\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n  margin: '3em',\r\n};\r\n\r\nclass MapContainer extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  map = {};\r\n  state = {\r\n    showingInfoWindow: false,\r\n    activeMarkers: {},\r\n    selectedPlaces: {},\r\n    selectedPlace: {},\r\n    manual: false,\r\n    currentLocation: {},\r\n    loaded: false\r\n\r\n  };\r\n  onMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n\r\n  onClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n  componentDidMount = () => {\r\n    if (navigator && navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(pos => {\r\n        const coords = pos.coords;\r\n        this.setState({\r\n          currentLocation: {\r\n            lat: coords.latitude,\r\n            lng: coords.longitude\r\n          },\r\n          loaded: true\r\n        });\r\n\r\n        //let center = new maps.LatLng(current.lat, current.lng);\r\n        //map.panTo(center);\r\n      });\r\n    }\r\n  }\r\n  componentDidUpdate = () => {\r\n    console.log(this.props.places)\r\n  }\r\n  panMapTo = () => {\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.state.loaded ? \r\n        <Map\r\n          google={this.props.google}\r\n          zoom={14}\r\n          style={mapStyles}\r\n          initialCenter={{\r\n            lat: this.state.currentLocation.lat,\r\n            lng: this.state.currentLocation.lng\r\n          }}\r\n        >\r\n        <Marker\r\n          onClick={this.onMarkerClick}\r\n          name={\"current location\"}\r\n          position={{\r\n            lat: this.state.currentLocation.lat,\r\n            lng: this.state.currentLocation.lng\r\n          }}\r\n        />\r\n        {this.props.places.map( place => {\r\n          return (\r\n            <Marker\r\n              key={place.coordinate.latitude}\r\n              onClick={this.onMarkerClick}\r\n              name={place.name}\r\n              position={{lat: place.coordinate.latitude, lng: place.coordinate.longitude}}\r\n            />\r\n          )\r\n        })}\r\n          <InfoWindow\r\n            marker={this.state.activeMarker}\r\n            visible={this.state.showingInfoWindow}\r\n            onClose={this.onClose}\r\n          >\r\n            <div>\r\n              <h4>{this.state.selectedPlace.name}</h4>\r\n            </div>\r\n          </InfoWindow>\r\n        </Map>\r\n      : <div> \"loading\" </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyC4q0S0GbA-cxRC_4ZVcd6AOeW3Yjt10tE',\r\n})(MapContainer);","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport Table from \"./components/Table\";\r\nimport Map from \"./components/Map\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      selectedPlaces: [],\r\n    }\r\n  }\r\n\r\n  addMarker (fields) {\r\n    let gged = this.state.selectedPlaces;\r\n    gged.push({'latitude':fields.latitude,'longitude':fields.longitude })\r\n    this.setState({\r\n      selectedPlaces: gged\r\n    });\r\n    console.log(this.state.selectedPlaces);\r\n  }\r\n  \r\n  render(){\r\n    return (     \r\n      <div className=\"motherContainer\">\r\n        <div className=\"search\"><SearchBar addMarker={this.addMarker.bind(this)} /></div>\r\n        <div className=\"result\">\r\n          <div className=\"map\"><Map places={\r\n            this.state.selectedPlaces.map(place => {return {name: \"gg\", coordinate:{'latitude':place.latitude,'longitude':place.longitude }}})\r\n          }/>\r\n          </div>\r\n          <div className=\"table\"><Table /></div>\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}