{"version":3,"sources":["components/SearchBar/index.js","components/Table/index.js","components/Map/index.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","HorizontalLoginForm","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","this","fieldsError","getFieldsError","getFieldDecorator","getFieldError","isFieldTouched","usernameError","passwordError","layout","onSubmit","Item","validateStatus","help","placeholder","mode","style","width","flexGrow","defaultValue","map","elem","key","type","htmlType","disabled","Object","keys","some","field","React","Component","WrappedHorizontalLoginForm","Form","create","name","columns","title","dataIndex","render","text","tags","tag","color","length","toUpperCase","data","coordinate","address","DataTable","dataSource","mapStyles","margin","MapContainer","google","zoom","initialCenter","lat","lng","GoogleApiWrapper","apiKey","App","className","SearchBar","Map","Table","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2737a222.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Icon, Input, Button, Select } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction hasErrors(fieldsError) {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass HorizontalLoginForm extends React.Component {\r\n  componentDidMount() {\r\n    // To disable submit button at the beginning.\r\n    this.props.form.validateFields();\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\r\n\r\n    // Only show error after a field is touched.\r\n    const usernameError = isFieldTouched('username') && getFieldError('username');\r\n    const passwordError = isFieldTouched('password') && getFieldError('password');\r\n    return (\r\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n        <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\r\n          <Input\r\n            placeholder=\"Lattitude\"\r\n          />,\r\n        </Form.Item>\r\n        <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\r\n          <Input\r\n            placeholder=\"Longitude\"\r\n          />,\r\n        </Form.Item>\r\n        <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\r\n          <Input\r\n            placeholder=\"Range\"\r\n          />,\r\n        </Form.Item>\r\n        <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\r\n        <Select\r\n          mode=\"multiple\"\r\n          style={{ width: '40em', flexGrow: '1' }}\r\n          placeholder=\"Please select\"\r\n          defaultValue={['restaurant']}\r\n        >\r\n          {['restaurants', 'coffee shop', 'park', 'theatre', 'shopping mall'].map( elem => <Option key={elem}> {elem} </Option> ) }\r\n        </Select>\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedHorizontalLoginForm = Form.create({ name: 'horizontal_login' })(HorizontalLoginForm);\r\n\r\nexport default WrappedHorizontalLoginForm;","import React from 'react';\r\nimport { Table, Divider, Tag } from 'antd';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    render: text => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: 'Address',\r\n    dataIndex: 'address',\r\n    key: 'address',\r\n  }, \r\n  {\r\n    title: 'Lat/Lon',\r\n    dataIndex: 'coordinate',\r\n  },\r\n  {\r\n    title: 'Tags',\r\n    key: 'tags',\r\n    dataIndex: 'tags',\r\n    render: tags => (\r\n      <span>\r\n        {tags.map(tag => {\r\n          let color = tag.length > 5 ? 'geekblue' : 'green';\r\n          if (tag === 'loser') {\r\n            color = 'volcano';\r\n          }\r\n          return (\r\n            <Tag color={color} key={tag}>\r\n              {tag.toUpperCase()}\r\n            </Tag>\r\n          );\r\n        })}\r\n      </span>\r\n    ),\r\n  },\r\n];\r\n\r\nconst data = [\r\n  {\r\n    key: '1',\r\n    name: 'IZAKAYA',\r\n    coordinate: 32 + \" / \" + 31.23,\r\n    address: 'New York No. 1 Lake Park',\r\n    tags: ['nice', 'child friendly'],\r\n  },\r\n  {\r\n    key: '2',\r\n    name: 'Dacca',\r\n    coordinate: 42.23 + \" / \" + 54,\r\n    address: 'London No. 1 Lake Park',\r\n    tags: ['loser'],\r\n  },\r\n  {\r\n    key: '3',\r\n    name: 'Dacca',\r\n    coordinate: 42.23 + \" / \" + 54,\r\n    address: 'London No. 1 Lake Park',\r\n    tags: ['NICE'],\r\n  },\r\n];\r\n\r\n\r\nclass DataTable extends React.Component{\r\n  render(){\r\n    return (\r\n      <Table columns={columns} dataSource={data} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default DataTable;\r\n","import React from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n  margin: '3em',\r\n};\r\n\r\nexport class MapContainer extends React.Component {\r\n  render() {\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={14}\r\n        style={mapStyles}\r\n        initialCenter={{\r\n          lat: -1.2884,\r\n          lng: 36.8233\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyC4q0S0GbA-cxRC_4ZVcd6AOeW3Yjt10tE'\r\n})(MapContainer);","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport Table from \"./components/Table\";\r\nimport Map from \"./components/Map\"\r\n\r\nfunction App() {\r\n  return (    \r\n    <>    \r\n    <div className=\"motherContainer\">\r\n      <div className=\"search\"><SearchBar /></div>\r\n      <div className=\"result\">\r\n        <div className=\"map\"><Map /></div>\r\n        <div className=\"table\"><Table /></div>\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}